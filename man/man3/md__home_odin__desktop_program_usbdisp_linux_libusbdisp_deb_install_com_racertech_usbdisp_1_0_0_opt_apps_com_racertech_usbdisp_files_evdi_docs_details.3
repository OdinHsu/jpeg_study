.TH "md__home_odin__desktop_program_usbdisp_linux_libusbdisp_deb_install_com_racertech_usbdisp_1_0_0_opt_apps_com_racertech_usbdisp_files_evdi_docs_details" 3 "2024年11月2日 星期六" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__home_odin__desktop_program_usbdisp_linux_libusbdisp_deb_install_com_racertech_usbdisp_1_0_0_opt_apps_com_racertech_usbdisp_files_evdi_docs_details \- details 

.SH "API Details"
.PP
.SS "Functions by group"
.SS "Versioning"
#!c evdi_get_lib_version(struct evdi_lib_version device);
.PP
Function returns library version\&. It uses semantic versioning to mark compatibility changes\&. Version consists of 3 components formatted as MAJOR\&.MINOR\&.PATCH
.PP
.IP "\(bu" 2
\fCMAJOR\fP number is changed for incompatibile API changes
.IP "\(bu" 2
\fCMINOR\fP number is changed for backwards-compatible changes
.IP "\(bu" 2
\fCPATCH\fP number is changed for backwards-compatibile bug fixes
.PP
.SS "Module parameters"
User can modify driver behaviour by its parameters that can be set at module load time or changed during runtime\&.
.PP
.IP "\(bu" 2
\fCinitial_device_count\fP Number of evdi devices added at module load time (default: 0)
.PP
.SS "EVDI nodes"
.SS "Finding an available EVDI node to use"
#!c evdi_device_status \fBevdi_check_device(int device)\fP;
.PP
Use this function to check if a particular \fC/dev/dri/cardX\fP is EVDI or not\&.
.PP
\fBArguments:\fP \fCdevice\fP is a number of card to check, e\&.g\&. passing \fC1\fP will mean \fC/dev/dri/card1\fP\&.
.PP
\fBReturn value:\fP
.PP
.IP "\(bu" 2
\fCAVAILABLE\fP if the device node is EVDI and is available to use\&.
.IP "\(bu" 2
\fCUNRECOGNIZED\fP when a node has not been created by EVDI kernel module\&.
.IP "\(bu" 2
\fCNOT_PRESENT\fP in other cases, e\&.g\&. when the device does not exist or cannot be opened to check\&.
.PP
.SS "Adding new EVDI node (pre v1\&.9\&.0)"
#!c int \fBevdi_add_device()\fP
.PP
Use this to tell the kernel module to create a new \fCcardX\fP node for your application to use\&.
.PP
\fBReturn value:\fP \fC1\fP when successful, \fC0\fP otherwise\&.
.SS "Opening device nodes (pre v1\&.9\&.0)"
#!c evdi_handle \fBevdi_open(int device)\fP;
.PP
This function attempts to open a DRM device node with given number as EVDI\&. Function performs compatibility check with underlying drm device\&. If version of the library and module does not match then the device will not be opened\&.
.PP
\fBArguments\fP: \fCdevice\fP is a number of card to open, e\&.g\&. \fC1\fP means \fC/dev/dri/card1\fP\&.
.PP
\fBReturn value:\fP On success, a handle to the opened device to be used in following API calls\&. \fCEVDI_INVALID_HANDLE\fP otherwise\&.
.SS "Request evdi nodes (since v1\&.9\&.0)"
#!c evdi_handle evdi_open_attached_to(char *sysfs_parent_device);
.PP
This function attempts to add (if necessary) and open a DRM device node attached to given parent device\&. Linking with another sysfs device is sometimes useful if it is required to reflect such relationship in sysfs\&.
.PP
The function performs a compatibility check with an underlying drm device\&. If version of the library and module does not match, the device will not be opened\&.
.PP
\fBArguments\fP: \fCsysfs_parent_device\fP is a string with the following format: \fCusb:[busNum]-[portNum1]\&.[portNum2]\&.[portNum3]\&.\&.\&.\fP, which describes the device that evdi is linked to\&. Or \fCNULL\fP when evdi device node is not linked with any other device\&.
.PP
\fBReturn value:\fP On success, a handle to the opened device to be used in following API calls\&. \fCEVDI_INVALID_HANDLE\fP otherwise\&.
.SS "Closing devices"
.PP
.nf
#!c
void evdi_close(evdi_handle handle);
.fi
.PP
 Closes an opened EVDI handle\&.
.PP
\fBArguments\fP: \fChandle\fP to an opened device that is to be closed\&.
.SS "Connection"
.SS "Opening connections"
.PP
.nf
#!c
void evdi_connect(evdi_handle handle,
          const unsigned char* edid,
          const unsigned edid_length,
          const uint32_t pixel_area_limit,
          const uint32_t pixel_per_second_limit);
.fi
.PP
 Creates a connection between the EVDI and Linux DRM subsystem, resulting in kernel mode driver processing a hot plug event\&.
.PP
\fBArguments\fP:
.PP
.IP "\(bu" 2
\fChandle\fP to an opened device
.IP "\(bu" 2
\fCedid\fP should be a pointer to a memory block with contents of an EDID of a monitor that will be exposed to kernel
.IP "\(bu" 2
\fCedid_length\fP is the length of the EDID block (typically 512 bytes, or more if extension blocks are present)
.IP "\(bu" 2
\fCpixel_area_limit\fP is the maximum pixel count (width x height) a connected device can handle
.IP "\(bu" 2
\fCpixel_per_second_limit\fP is the maximum pixel per second rate (width x height x frames per second) a connected device can handle
.PP
.SS "Disconnecting"
.PP
.nf
#!c
void evdi_disconnect(evdi_handle handle)
.fi
.PP
 Breaks the connection between the device handle and DRM subsystem - resulting in an unplug event being processed\&.
.PP
\fBArguments\fP: \fChandle\fP to an opened device\&.
.SS "Buffers"
Managing memory for frame buffers is left to the client applications\&. The \fC\fBevdi_buffer\fP\fP structure is used to let the library know details about the frame buffer your application is working with\&. For more details, see \fCstruct evdi_buffer\fP description\&.
.SS "Registering"
#!c void \fBevdi_register_buffer(evdi_handle handle, evdi_buffer buffer)\fP;
.PP
This function allows to register a \fCbuffer\fP of type \fC\fBevdi_buffer\fP\fP with an opened EVDI device \fChandle\fP\&.
.PP
!!! warning Registering a buffer does not allocate memory for the frame\&.
.SS "Unregistering"
.PP
.nf
#!c
void evdi_unregister_buffer(evdi_handle handle, int bufferId);
.fi
.PP
 This function unregisters a buffer with a given \fCbufferId\fP from an opened EVDI device \fChandle\fP\&.
.PP
!!! warning Unregistering a buffer does not deallocate memory for the frame\&.
.SS "Screen updates"
.SS "Requesting an update"
#!c bool \fBevdi_request_update(evdi_handle handle, int bufferId)\fP;
.PP
Requests an update for a buffer with a given \fCbufferId\fP\&. The buffer must be already registered with the library\&.
.PP
\fBArguments\fP:
.PP
.IP "\(bu" 2
\fChandle\fP to an opened device\&.
.IP "\(bu" 2
\fCbufferId\fP is an identifier for a buffer that should be updated\&.
.PP
.PP
\fBReturn value:\fP
.PP
The function can return \fCtrue\fP if the data for the buffer is ready to be grabbed immediately after the call\&. If \fCfalse\fP is returned, then an update is not yet ready to grab and the application should wait until it gets notified by the kernel module - see \fCEvents and handlers\fP\&.
.SS "Grabbing pixels"
.PP
.nf
#!c
void evdi_grab_pixels(evdi_handle handle, evdi_rect *rects, int *num_rects);
.fi
.PP
 Grabs pixels following the most recent update request (see \fCRequesting an update\fP)\&.
.PP
This should be called either after a call to \fCevdi_request_update\fP (if it returns \fCtrue\fP which means pixels can be grabbed immediately), or while handling the \fCupdate_ready\fP notification\&.
.PP
\fBArguments\fP:
.PP
.IP "\(bu" 2
\fChandle\fP to an opened device\&.
.IP "\(bu" 2
\fCrects\fP is a pointer to the first \fC\fBevdi_rect\fP\fP that the library fills, based on what the kernel tells\&.
.PP
.PP
!!! note It is expected that this pointer is a beginning of an array of \fC\fBevdi_rect\fP\fPs, and current implementation assumes the array does not contain more than 16 slots for rects\&.
.PP
.IP "\(bu" 2
\fCnum_rects\fP is a pointer to an integer that will be modified to tell how many dirty rectangles are valid in the list, and the client should only care about as many\&. In particular, a failed grab will be indicated by \fC0\fP valid rectangles to take into account (this can happen when there was a mode change between the request and the grab)\&.
.PP
.SS "DDC/CI response"
.PP
.nf
#!c
void evdi_ddcci_response(evdi_handle handle, const unsigned char *buffer,
    const uint32_t buffer_length, const bool result);
.fi
.PP
 Pass back DDC/CI data following the most recent DDC/CI request to the EVDI kernel driver (see \fCDDC/CI data notification\fP)\&.
.PP
\fBArguments\fP:
.PP
.IP "\(bu" 2
\fChandle\fP to an opened device\&.
.IP "\(bu" 2
\fCbuffer\fP a pointer to the response buffer\&. This will be copied into kernel space\&.
.IP "\(bu" 2
\fCbuffer_length\fP the length of the response buffer\&.
.IP "\(bu" 2
\fCresult\fP the boolean result\&. The caller should set \fCresult\fP to true if the most recent DDC/CI request was successful and false if it was unsuccessful\&. If false, \fCbuffer\fP and \fCbuffer_length\fP are ignored\&.
.PP
.PP
!!! note The \fCbuffer_length\fP will be truncated to 64 bytes (\fCDDCCI_BUFFER_SIZE\fP)\&.
.SS "Events and handlers"
.SS "DPMS mode change"
.PP
.nf
#!c
void (*dpms_handler)(int dpms_mode, void* user_data);
.fi
.PP
 This notification is sent when a DPMS mode changes\&. The possible modes are as defined by the standard, and values are bit-compatible with DRM interface:
.PP
.PP
.nf
/* DPMS flags */
#define DRM_MODE_DPMS_ON        0
#define DRM_MODE_DPMS_STANDBY   1
#define DRM_MODE_DPMS_SUSPEND   2
#define DRM_MODE_DPMS_OFF       3
.fi
.PP
.PP
*[DPMS]: Display Power Management Signaling
.SS "Mode change notification"
.PP
.nf
#!c
void (*mode_changed_handler)(evdi_mode mode, void* user_data);
.fi
.PP
 This notification is sent when a display mode changes\&. Details of the new mode are sent in the \fCmode\fP argument\&. See \fCevdi_mode\fP for description of the structure\&.
.SS "Update ready notification"
.PP
.nf
#!c
void (*update_ready_handler)(int buffer_to_be_updated, void* user_data);
.fi
.PP
 This notification is sent when an update for a buffer, that had been earlier requested is ready to be consumed\&. The buffer number to be updated is \fCbuffer_to_be_updated\fP\&.
.SS "Cursor change notification"
.PP
.nf
#!c
void (*cursor_set_handler)(struct evdi_cursor_set cursor_set, void* user_data);
.fi
.PP
 This notification is sent for an update of cursor buffer or shape\&. It is also raised when cursor is enabled or disabled\&. Such situation happens when cursor is moved on and off the screen respectively\&.
.SS "Cursor move notification"
.PP
.nf
#!c
void (*cursor_move_handler)(struct evdi_cursor_move cursor_move, void* user_data);
.fi
.PP
 This notification is sent for a cursor position change\&. It is raised only when cursor is positioned on virtual screen\&.
.SS "CRTC state change"
.PP
.nf
#!c
void (*crtc_state_handler)(int state, void* user_data);
.fi
.PP
 This event is deprecated\&. Please use DPMS mode change event instead\&. Sent when DRM's CRTC changes state\&. The \fCstate\fP is a value that's forwarded from the kernel\&.
.SS "DDC/CI data notification"
.PP
.nf
#!c
void (*ddcci_data_handler)(struct evdi_ddcci_data ddcci_data, void *user_data);
.fi
.PP
 This notification is sent when an i2c request has been made to the DDC/CI address (0x37)\&.
.PP
The module will wait for a maximum of DDCCI_TIMEOUT_MS (50ms - The default DDC request timeout) for a response to this request to be passed back via \fCevdi_ddcci_response\fP\&.
.SS "Logging"
Client can register their own callback to be used for logging instead of default \fCprintf\fP\&. 
.PP
.nf
#!c
void evdi_set_logging(struct evdi_logging evdi_logging);

.fi
.PP
 For more on argument see \fCstruct evdi_logging\fP\&.
.SS "Types"
.SS "evdi_handle"
This is a handle to an opened device node that you get from an \fCevdi_open\fP call, and use in all following API calls to indicate which EVDI device you communicate with\&.
.SS "evdi_selectable"
A typedef denoting a file descriptor you can watch to know when there are events being signalled from the kernel module\&. Each opened EVDI device handle has its own descriptor to watch, which you can get with \fCevdi_get_event_ready\fP\&. When the descriptor becomes ready to read from, the application should call \fCevdi_handle_events\fP to dispatch notifications to its handlers\&.
.SS "evdi_device_status"
An enumerated type used while finding the DRM device node that is EVDI\&. Possible values are \fCAVAILABLE\fP, \fCUNRECOGNIZED\fP and \fCNOT_PRESENT\fP\&.
.SS "evdi_rect"
A simple structure used by the library to represent a rectangular area of a screen\&. Top left coordinates of the rectangle are \fCx1\fP and \fCy1\fP, bottom right are \fCx2\fP and \fCy2\fP\&.
.SS "evdi_mode"
A structure used to describe a video mode that's set for a display\&. Contains details of resolution set (\fCwidth\fP, \fCheight\fP), refresh rate (\fCrefresh_rate\fP), and details of a pixel format used to encode color value (\fCbits_per_pixel\fP and \fCpixel_format\fP - which are forwarded from kernel's DRM)\&.
.SS "evdi_buffer"
A structure holding details about a buffer\&. 
.PP
.nf
#!c
typedef struct {
    int id;
    void* buffer;
    int width;
    int height;
    int stride;

    evdi_rect* rects;
    int rect_count;
} evdi_buffer;

.fi
.PP
 Buffers have IDs, which can be arbitrarily chosen integer numbers - but typically a simple sequence of numbers starting from \fC0\fP is used in client applications\&. The pointer to the beginning of an already allocated memory block should be assigned to the \fCbuffer\fP member of the structure\&. This memory will be filled by the kernel module when handling requests to grab pixels\&.
.PP
\fCwidth\fP, \fCheight\fP and \fCstride\fP are properties of the buffer - the first two indicate what the size of the frame is, and \fCstride\fP is a width stride - tells what is the increment in bytes between data for lines in memory\&.
.PP
Stride can be equal to width of a single line multiplied by the number of bytes necessary for encoding color value for one pixel (e\&.g\&. 4 for RGB32) if the data for lines are contigous in the memory, but you can use larger value to indicate extra space/padding between them, e\&.g\&. oftentimes an additional requirement for the value of stride is it being divisbile by 8; note that those values might be specific to particular hardware/graphic drivers\&. Please consult documentation of your GPU for details\&.
.PP
Last two structure members, \fCrects\fP and \fCrect_counts\fP are updated during grabbing pixels to inform about the number and coordinates of areas that are changed from the last update\&.
.SS "evdi_event_context"
.PP
.nf
#!c
typedef struct {
  void (*dpms_handler)(int dpms_mode, void* user_data);
  void (*mode_changed_handler)(evdi_mode mode, void* user_data);
  void (*update_ready_handler)(int buffer_to_be_updated, void* user_data);
  void (*crtc_state_handler)(int state, void* user_data);
  void (*cursor_set_handler)(struct evdi_cursor_set cursor_set, void *user_data);
  void (*cursor_move_handler)(struct evdi_cursor_move cursor_move, void *user_data);
  void (*ddcci_data_handler)(struct evdi_ddcci_data ddcci_data, void *user_data);
  void* user_data;
} evdi_event_context;
.fi
.PP
 The \fC\fBevdi_device_context\fP\fP structure is used for holding pointers to handlers for all notifications that the application may receive from the kernel module\&. The \fCuser_data\fP member is a value that the library will use while dispatching the call back\&. See \fCEvents and handlers\fP for more information\&.
.SS "evdi_lib_version"
.PP
.nf
#!c
struct evdi_lib_version {
    int version_major;
    int version_minor;
    int version_patchlevel;
};
.fi
.PP
 The \fC\fBevdi_lib_version\fP\fP structure contains libevdi version\&. Version can be used to check compatibility between library and a client application\&.
.SS "evdi_cursor_set"
.PP
.nf
#!c
struct evdi_cursor_set {
    int32_t hot_x;
    int32_t hot_y;
    uint32_t width;
    uint32_t height;
    uint8_t enabled;
    uint32_t buffer_length;
    uint32_t *buffer;
    uint32_t pixel_format;
    uint32_t stride;
};
.fi
.PP
 The \fC\fBevdi_cursor_set\fP\fP structure contains cursor state information\&. \fChot_x\fP and \fChot_y\fP define hotspot information\&. \fCenabled\fP parameter is true when cursor bitmap is available and cursor is visible on virtual display\&. Parameters \fCwidth\fP and \fCheight\fP define size of the cursor bitmap stored in a \fCbuffer\fP memory area of size \fCbuffer_length\fP\&.
.PP
!!! warning Event handler or library user has to free buffer memory when it is not using it\&.
.PP
Remaining \fCstride\fP and \fCpixel_format\fP describe data organization in the buffer\&. \fCstride\fP is a size of a single line in a buffer\&. Usually it is width of the cursor multiplied by bytes per pixel value plus additional extra padding\&. It ensures proper alignment of subsequent pixel rows\&. Pixel encoding is described by FourCC code in \fCpixel_format\fP field\&.
.SS "evdi_cursor_move"
.PP
.nf
#!c
struct evdi_cursor_move {
    int32_t x;
    int32_t y;
};
.fi
.PP
 The \fC\fBevdi_cursor_move\fP\fP structure contains current cursor position\&. It is defined as top left corner of the cursor bitmap\&.
.SS "evdi_ddcci_data"
.PP
.nf
#!c
struct evdi_ddcci_data {
    uint16_t address;
    uint16_t flags;
    uint32_t buffer_length;
    uint8_t *buffer;
};
.fi
.PP
 The \fC\fBevdi_ddcci_data\fP\fP structure contains:
.PP
.IP "\(bu" 2
\fCaddress\fP i2c address, will always be 0x37\&.
.IP "\(bu" 2
\fCflags\fP read/write flags\&. Read = 1, Write = 0\&.
.IP "\(bu" 2
\fCbuffer_length\fP the length of the buffer\&.
.IP "\(bu" 2
\fCbuffer\fP pointer to the ddc/ci buffer\&. For both read and write this will be truncated to 64 bytes (\fCDDCCI_BUFFER_SIZE\fP)\&.
.PP
.PP
!!! warning Although the DDC spec advices the maximum buffer length is 32 bytes, we have identified monitors which support bigger buffers\&.
.SS "evdi_logging"
.PP
.nf
#!c
struct evdi_logging {
    void (*function)(void *user_data, const char *fmt, ...);
    void *user_data;
};
.fi
.PP
 Structure contains two fields:
.PP
.IP "\(bu" 2
\fCfunction\fP which is a pointer to the actual callback\&. The \fCfmt\fP and \fC\&.\&.\&.\fP are the same as in case of \fCprintf\fP\&.
.IP "\(bu" 2
\fCuser_data\fP a pointer provided by the client when registering callback
.PP
.PP
!!! note By setting \fCfunction\fP to NULL libevdi will switch to default behaviour of using \fCprintf\fP\&. 
