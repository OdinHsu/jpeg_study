.TH "md__home_odin__desktop_program_usbdisp_linux_libusbdisp_deb_install_com_racertech_usbdisp_1_0_0_opt_apps_com_racertech_usbdisp_files_evdi_docs_quickstart" 3 "2024年11月2日 星期六" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__home_odin__desktop_program_usbdisp_linux_libusbdisp_deb_install_com_racertech_usbdisp_1_0_0_opt_apps_com_racertech_usbdisp_files_evdi_docs_quickstart \- quickstart 

.SH "Quick Start"
.PP
This section explains how to write a basic client for EVDI\&. Details of API calls are omitted here for brevity\&.
.SH "Typical application"
.PP
Applications using EVDI will typically:
.PP
.IP "\(bu" 2
find a free EVDI node, or add a new node if none was found; then open it
.IP "\(bu" 2
connect to the EVDI node, letting the DRM subsystem know what is the monitor that the application drives
.IP "\(bu" 2
allocate memory for, and register buffer(s) that will be used to receive screen updates
.IP "\(bu" 2
request and consume updates and other notifications in a loop whenever the kernel \fCsignals updates are ready\fP
.PP
.SS "EVDI nodes"
EVDI reuses DRM subsystem's \fCcardX\fP nodes for passing messages between the kernel and userspace\&. In order to distinguish non-EVDI nodes from a node that's created by EVDI kernel module, \fCevdi_check_device\fP function should be used\&.
.PP
The library only allows to connect to DRM nodes that are created by EVDI\&. Attempts to connect to other nodes (e\&.g\&. related to a built-in GPU) will fail\&.
.SS "Adding new nodes (pre v1\&.9\&.0)"
!!! note Requires administrative rights\&. To call this your application needs to have been run with \fCsudo\fP, or by root\&.
.PP
In order to create a new EVDI \fCcardX\fP node, call \fCevdi_add_device\fP function\&. A single call adds one additional DRM card node that can later be used to connect to\&.
.PP
At the moment, every extra screen that you want to manage needs a separate node\&.
.SS "Opening EVDI node (pre v1\&.9\&.0)"
Once an available EVDI node is identified, your application should call \fCevdi_open\fP, passing a number of \fCcardX\fP that you want to open\&. This returns an \fCevdi_handle\fP that you will use for following API calls, or \fCEVDI_INVALID_HANDLE\fP if opening failed\&.
.SS "Requesting EVDI node (since v1\&.9\&.0)"
!!! note Requires administrative rights\&. To call this your application needs to have been run with \fCsudo\fP, or by root\&.
.PP
Adding and opening evdi devices is easier since libevdi v1\&.9\&.0\&. It's sufficient to call \fCevdi_open_attached_to(NULL)\fP in order to add a new evdi node and open it\&.
.PP
It is possible to bind evdi devices with usb devices if it is necessary to show such relationship in sysfs\&. It is done via \fCconst char *sysfs_parent_device\fP parameter of \fCevdi_open_attached_to\fP function\&. USB parent device is described by a string with the following format: \fCusb:[busNum]-[portNum1]\&.[portNum2]\&.[portNum3]\&.\&.\&.\fP
.PP
e\&.g\&. A \fCevdi_open_attached_to('usb:2-2\&.1')\fP call will link \fC/sys/bus/usb/devices/2-2\&.1/evdi\&.0\fP to \fC/sys/bus/platform/devices/evdi\&.0\fP which is the first available evdi node\&.
.PP
If an available device exists calling this does not require administrative rights\&. Otherwise, administrative rights are needed to create a new device\&. You can ensure a device is available by \fCconfiguring the kernel module\fP to create devices when it is loaded\&.
.SS "Closing EVDI node"
In order to close the handle, call \fCevdi_close\fP\&.
.SS "Removing EVDI nodes"
!!! note Requires administrative rights\&. To write to this file your application needs to have been run with \fCsudo\fP, or by root\&.
.PP
Write to \fC/sys/devices/evdi/remove_all\fP\&. For example:
.PP
.PP
.nf
echo 1 | sudo tee /sys/devices/evdi/remove_all
.fi
.PP
.SS "Connecting and disconnecting"
Connecting to EVDI tells DRM subsystem that there is a monitor connected, and from this moment the system is aware of an extra display\&. Connection also lets DRM know what is the \fCEDID\fP of the monitor that a particular EVDI node handles\&. Think of this as something similar to plugging a monitor with a cable to a port of a graphics card\&.
.PP
Similarly, disconnecting indicates that the display is no longer there - like physically pulling cable out from the graphics adapter port\&.
.PP
To connect or disconnect, use \fCevdi_connect\fP and \fCevdi_disconnect\fP, respectively\&.
.SS "Frame buffers"
To know what the contents of the screen is, your application will use a block of memory that it can read pixel data from\&.
.PP
The library itself does \fInot\fP allocate any memory for buffers - this is to allow more control in the client application\&. Therefore, before you request screen updates for the screens you're managing, an appropriate amount of memory must be allocated to hold screen data within your application\&. The application can register as many buffers as you like, and subsequent update requests can refer to any buffer that was previously registered\&.
.PP
Allocated memory is made available for EVDI library to use by calling \fCevdi_register_buffer\fP\&. Symmetrically, \fCevdi_unregister_buffer\fP is used to tell the library not to use the buffer anymore\&.
.SS "Cursor"
Mouse cursor is an important part of the desktop\&. Because of this, evdi provides special control over it\&.
.PP
There are two ways to handle cursor:
.PP
.IP "\(bu" 2
Automatic cursor compositing on framebuffer(default)\&. Every cursor change causes \fCupdate_ready\fP event to be raised\&. In the following grab pixels operation evdi will compose cursor on the user supplied framebuffer\&.
.IP "\(bu" 2
Cursor change notifications\&. Controlled with \fCevdi_enable_cursor_events\fP function call\&. In that mode the responsibility for cursor blending is passed to the library client\&. Instead of \fCupdate_ready\fP event the \fCcursor_set\fP and \fCcursor_move\fP notifications are sent\&.
.PP
.SS "DDC/CI"
As part of creating an EVDI node, the module also creates an i2c adapter\&. This can be used to pass DDC/CI buffers to and from the connected monitor to adjust brightness and contrast\&. Data requests to this adapter for DDC/CI (on address 0x37) are passed to userspace as DDC/CI data notifications via \fCddcci_data_handler\fP and responses are passed back using \fCevdi_ddcci_response\fP\&.
.SS "Running loop"
You are expected to promptly handle events and to \fCrequest updates\fP and \fCgrab pixels\fP regularly for any virtual monitor you have connected\&. If you fail to do so the device may become unresponsive\&.
.SS "Events and notifications"
Due to its design and split of responsibilities between the kernel and userspace code, EVDI's working model is an asynchronous one\&. Therefore, your application should monitor a file descriptor exposed by \fCevdi_get_event_ready\fP function, and whenever it becomes ready to read, call \fCevdi_handle_events\fP to dispatch events that are being signalled to the right handlers\&.
.PP
The handlers are defined in your application and are shared with the library through a \fC\fBevdi_event_context\fP\fP structure that \fCevdi_handle_events\fP uses for dispatching the call\&.
.SS "Types of events"
The notifications your application can (and should) be handling, are:
.PP
.IP "\(bu" 2
Update ready notification (sent once a request to update a buffer is handled by kernel)
.IP "\(bu" 2
Mode changed notification (sent from DRM after screen mode is changed)
.IP "\(bu" 2
DPMS notifications (telling the new power state of a connector)
.IP "\(bu" 2
CRTC state change event (exposing DRM CRTC state)
.IP "\(bu" 2
Cursor events (send when cursor position or state changes)
.IP "\(bu" 2
DDC/CI notification (sent when an i2c request for DDC/CI data is made)
.PP
.PP
You will start receiving first notifications from the kernel module right after connecting to EVDI\&. Your application should use this information before you ask for screen updates to make sure the buffers are the right size\&.
.SS "Logging"
By default libevdi uses \fCprintf\fP to print messages to stdout\&. Client application can provide its own callback which will be used instead by calling \fCevdi_set_logging\fP\&. The same function can be used to switch back to default behaviour (by setting callback to \fCNULL\fP); 
